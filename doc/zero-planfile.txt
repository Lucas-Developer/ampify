---
license: Public Domain
layout: page
title: Zero Planfile
---

Zero Planfile
=============

This is the planfile for Ampify Zero, an initial step towards the decentralised
vision of ``Ampify 1.0``. It is intended as a working prototype and builds on
top of existing technologies like Caja, jQuery, Git, App Engine, Go, Node.js,
Python, Redis, S3, Sendgrid, Twilio and V8.

.. plan:: zero

  {"todo": ["wip", "todo"], "done": ["inreview", "needsreview", "done"]}


Node Structure
--------------

A Node is started up using the ``ampnode`` executable.

On startup all nodes establish a live connection to the Seed node.

.. class:: ascii-art

::

       +----------------+
       | Internet Horde |
       +----------------+
             |                                  +-------------+
             |             +-----------+        | Other Nodes |
             ±             | Seed Node |        +-------------+
             |             +-----------+              |
             |              |     \                   |
         +-------------+    |      \                  |
         | Public Port |    |     +----------------------------------+
         +-------------+    |     | Meta Port (Internal Access Only) |
                \           |     +----------------------------------+
                 \          |       /
                  \         |      /
       +===========\========|=====/====================================+
       |            \       |    /                                     |
       |          +----------------------+                             |
       |          | Node: Parent Process |                             |
       |          +----------------------+                             |
       |                   |                                           |
       |                   |                                           |
       |    +-------------------------+-----------------------+        |
       |    |                         |                       |        |
       |  +----------------+          |            +----------------+  |
       |  | Nodule Process |  +----------------+   | Nodule Process |  |
       |  +----------------+  | Nodule Process |   +----------------+  |
       |                      +----------------+                       |
       |                                                               |
       +===============================================================+


Argonought
----------

.. tag:: #foundation, @tav, wip

  ✗ Implement a serialisation format.

    Argonought is a JSON-inspired serialisation format that should offer us
    features not collectively available in other formats:

    * JSON-like simplicty.
    * Efficient binary encoding.
    * Lexicographically sortable encoding.

    Both `Protocol Buffers <http://code.google.com/p/protobuf/>`_ and `Thrift
    <http://incubator.apache.org/thrift/>`_ are technically
    inadequate. They haven't learnt from the mistakes of `CORBA
    <http://en.wikipedia.org/wiki/Common_Object_Request_Broker_Architecture>`_.

.. tag:: #foundation, @tav, needsreview

  ✓ Implement support for lexicographically sortable representation of numbers.

    When dealing with numbers, people don't care about crap like whether it's an
    unsigned 32bit integer or a 128bit decimal. Even programmers have been
    spoilt by automatic type coercion in many dynamic languages, e.g.

    .. syntax:: irb

      >> 1000000.class
      => Fixnum

      >> 10000000000.class
      => Bignum

    Unfortunately this support is not reflected in most datastores. App Engine,
    for example, indexes strings up to 500 bytes in length but `truncates
    <http://code.google.com/appengine/docs/python/datastore/typesandpropertyclasses.html#IntegerProperty>`_
    integer values greater than 64bits.

    If one were to try and encode the number as a string to take advantage of
    the extra space, the naive approach fails quite quickly:

    .. syntax:: irb

      >> '9' > '8'
      => true

      >> '1000' > '9'
      => false

    The official documentation for SimpleDB even `recommends
    <http://developer.amazonwebservices.com/connect/entry.jspa?categoryID=152&externalID=1232>`_
    the usual tricks of negative-number offsetting and zero padding as a
    solution to this problem:

    .. syntax:: irb

      >> '1000' > '0009'
      => false

    But this approach gets a massive FAIL since it requires not only having to
    predefine the largest possible value (the exact problem we're trying to
    avoid!), but also ends up wasting a lot of space due to the zero padding.

    To solve these and other problems, Argonought implements a very efficient
    encoding of numbers so that they can be sorted in `lexicographical order
    <http://en.wikipedia.org/wiki/Lexicographical_order>`_:

    .. syntax:: pycon

      >>> argonought.pack_number(8234364)             # takes just 3 bytes!
      '\xfe\xa2\xa0'

      >>> argonought.pack_number(8234364) > argonought.pack_number(-234364)
      True

    It can handle, subject to memory limits, numbers of whatever size --
    including arbitrary precision decimals like
    ``1.618033988749894848204586834365638``.


Continuous Integration
----------------------


Request Handling
----------------

.. tag:: #admin, @tav

  ✓ Investigate managed DNS providers.

    Any effort to provide high availability is buggered if a user's first action
    -- doing a DNS lookup for ``ampify.it`` -- is unresponsive/faulty. We're
    currently using Linode's super nice DNS service that comes with our VPS, but
    should find another provider as we outgrow it.

    `UltraDNS <http://www.ultradns.com>`_ is the big boy in the managed DNS
    world and are priced so high that only other big boys could afford it. `DNS
    Made Easy <https://www.dnsmadeeasy.com>`_, in comparison, costs over 100x
    less! They have an impressive offering at very affordable prices:

    * DNS servers running on a globally distributed `anycast network
      <http://en.wikipedia.org/wiki/Anycast>`_ -- so users should get their
      queries answered faster.

    * Automated updating of A records to failover IPs if their monitoring system
      (which runs every 2-4 minutes) detects our servers to be unresponsive.

    One major feature they lack is geo-location based serving of records. For
    example sending requests from Italy to our European data center and requests
    from Brazil to our North American data center. They do suggest on their
    `Facebook page <http://www.facebook.com/dnsmadeeasy>`_ that support for this
    might get added later this year.

    The more expensive `Dynect <http://dyn.com/dynect>`_ service -- who provide
    everything offered by DNS Made Easy and even seem to be marginally faster --
    has geo-location based serving as part of their `Global Server Load Balancer
    <http://dyn.com/dynect-traffic-management>`_ solution.

    Their combined monitoring, load balancing and geo-routing sounds so good
    that it's tempting to forego any kind of LVS based load balancing at our
    data centers. However this has a few drawbacks:

    * It will not be possible to enable people to point a root/apex domain at
      our servers as it will not have a relatively stable IP address.

    * The monitoring by Dynect is not going to be as responsive as an LVS
      director running on the local network.

.. tag:: #admin, @evangineer, wip

  ✗ Investigate load balancing solutions.

    In public deployments, requests should be load balanced across Ampify
    frontend servers. Hardware load balancers simply don't offer enough value to
    justify their cost, so we need to find a decent software-based solution.

    There are a number of `LVS <http://www.linuxvirtualserver.org>`_ (Linux
    Virtual Server) components that are worth exploring: `ldirectord
    <http://www.vergenet.net/linux/ldirectord/>`_, `heartbeat
    <http://www.linux-ha.org>`_, `keepalived <http://www.keepalived.org>`_, etc.
    Hosting companies like Hostway also offer managed LVS which might be
    worthwhile.

    Whatever option is decided upon, it should be based on open source software,
    have redundancy for the load balancer itself and deal with health checks for
    HTTP, HTTPS and SMTP backend servers.

.. tag:: #admin

  ✗ Setup network monitoring infrastructure.

    Monitoring of resource usage is essential for detecting attacks and
    identifying potential bottlenecks to optimise -- not to mention capacity
    planning. Thankfully there's increased support for protocols like `SNMP
    <http://en.wikipedia.org/wiki/Simple_Network_Management_Protocol>`_
    nowadays.

    There a number of tools that can help with the monitoring, e.g. `rrdtool
    <http://oss.oetiker.ch/rrdtool/>`_, `munin
    <http://munin.projects.linpro.no>`_, `shinken
    <http://www.shinken-monitoring.org>`_, `cacti <http://www.cacti.net>`_,
    `mrtg <http://oss.oetiker.ch/mrtg/>`_, etc. The appropriate tools should be
    setup on our frontend servers and an overview should be accessible at
    centralised location(s).

.. tag:: #admin

  ✗ Define the server firewall infrastructure.

    There should be a set of `iptables <http://www.netfilter.org>`_
    configurations:

    * Frontend servers should only allow for external TCP traffic to ports 8025,
      8080 and 8443.

    * Internal traffic should be able to connect on all non-privileged ports.

    We should have a decent default configuration which protects against common
    `denial of service <http://en.wikipedia.org/wiki/Denial-of-service_attack>`_
    attack patterns. It should also be possible to do live updates of denied
    hosts on our servers in addition to working with our hosting companies to
    block hosts at the network switches.

.. tag:: #admin

  ✗ Buy an SSL certificate for ampify.it.

    We should only serve Ampify requests over SSL. While this means a lot of
    additional cost to us due to the extra resources used by secure connections,
    the security benefit to end users will make this worthwhile, e.g. protection
    against `man in the middle attacks
    <http://en.wikipedia.org/wiki/Man-in-the-middle_attack>`_.

    There are only a few root Certificate Authorities recognised by most
    browsers. Most of the companies like `GeoTrust
    <http://www.geotrust.com/ssl/compare-ssl-certificates.html>`_ (Equifax) and
    `Thawte <http://www.thawte.com/>`_ are owned by Verisign. They take
    advantage of their monopoly by charging through the roof for something that
    costs very little.

    There are a number of cheaper SSL certificate providers like `Comodo
    <http://www.instantssl.com>`_ and `GoDaddy
    <https://www.godaddy.com/ssl/ssl-certificates.aspx>`_. `RapidSSL
    <http://www.rapidssl.com/ssl-certificate-products/ssl-certificate.htm>`_, a
    GeoTrust subsidiary, also offer fairly cheap certs. As of this writing they
    are offering a wildcard cert for $199/year.

    As for `EV certificates
    <http://en.wikipedia.org/wiki/Extended_Validation_Certificate>`_, there's no
    conclusive evidence that the green bar provides any real additional value,
    so we'll skip that for now.

.. tag:: #admin, @tav

  ✓ Investigate frontend web servers.

    In an ideal world the Ampify proxy node would be a production level
    ``HTTP/1.1`` compliant web server. But unfortunately that's a while off and
    until then we need to have a decent web server in front of it.

    There are a number of decent options available nowadays. Of these, `nginx
    <http://nginx.org/en/>`_ offers good performance, stability and even support
    for `upgrading the nginx binary
    <http://wiki.nginx.org/NginxCommandLine#Upgrading_To_a_New_Binary_On_The_Fly>`_
    without downtime. `Cherokee <http://www.cherokee-project.com>`_ and
    `lighttpd <http://www.lighttpd.net>`_ are decent alternatives but do not
    inspire as much confidence as nginx.

.. tag:: #admin

  ✗ Put together an nginx package for redpill.

    Nginx has two different branches: 0.7.x (stable) and 0.8.x (development).
    The development branch should be tested for stability, otherwise the package
    should be based on the stable branch.

    The package build file should ensure that the ``http_ssl``, ``http_gzip``,
    ``http_proxy`` and any other `relevant modules
    <http://wiki.nginx.org/NginxModules>`_ are built -- minimising needless
    bloat and dependencies (i.e. security holes) as much as possible.

.. tag:: #admin

  ✗ Define a configuration file for the nginx servers.

    There needs to be a default nginx config file we can use across all of our
    frontend servers. This should cover everything from ensuring that requests
    are served over SSL (redirecting non-secured connections) to passing on the
    request to the Ampify proxy nodes.

    We'll be using ``proxy_pass`` since `FastCGI
    <http://en.wikipedia.org/wiki/FastCGI>`_ doesn't seem to offer enough of a
    performance benefit. Special care should be taken to handle the request IP
    address and gzip encoding -- the `tornado config
    <http://www.tornadoweb.org/documentation#running-tornado-in-production>`_ is
    a good starting point.

    The configuration should be optimised based on benchmarking using ``ab`` or
    ``httperf``. It's unfortunate that nginx doesn't have HAProxy's really
    useful `stats page <http://demo.1wt.eu>`_, but perhaps something could be
    approximated using `nginx-rrd <http://www.nginx.eu/nginx-rrd.html>`_ to help
    with identifying bottlenecks.

.. tag:: #admin

  ✗ Implement ping responses on the frontend.

    A number of different services from the monitoring systems of our DNS
    providers to the LVS director will be doing health checks on our frontend
    web servers. These should support the following responses:

    * ``/a/ping.frontend`` -- a response page on the frontend nginx servers
      which should simply return the plain text ``pong``.

    * ``/a/ping.proxy`` -- a response service on the proxy node behind the
      frontend servers. This should respond with appropriate values for the
      following JSON structure:

      .. syntax:: javascript

        {"zone": "eu-1", "timestamp": 1266978987.705}

.. tag:: #admin, #security, @evangineer

  ✗ Conduct pentesting of the frontend infrastructure.

    Unfortunately the Internet isn't as friendly a place as we might like it to
    be. There are folks who would like to break into our servers just for fun.
    As the saying goes, "If you can't beat them, join them". Pre-launch, we need
    to conduct thorough `penetration testing
    <http://en.wikipedia.org/wiki/Penetration_test>`_ of our servers to ensure
    that they can keep out the script kiddies and more `capable adversaries
    <http://googleblog.blogspot.com/2010/01/new-approach-to-china.html>`_.


Status Monitoring
-----------------

.. tag:: #admin, @tav, @evangineer

  ✓ Investigate off-site uptime and latency monitoring services.

    It's important to have off-site monitoring so that we can quickly know about
    issues that end users might be experiencing. We could run something like
    `Nagios <http://www.nagios.org>`_ on a bunch of off-site VPS nodes, but it's
    bloated and ugly.

    The same goes for `monitis <http://monitis.com>`_ which is a pretty decent
    third-party monitoring and notification service. Its competitor `Pingdom
    <http://www.pingdom.com>`_ looks a lot prettier but charges too much without
    offering enough flexibility. Conclusion: code our own monitoring service.

.. tag:: #admin

  ✗ Implement data gatherers for remonit -- a remote monitoring tool.

    The remonit tool should support configurable monitoring of a number of
    different factors by wrapping around mature Unix tools:

    * Network latency using ``ping -c 1``.

    * Network routing using ``traceroute``.

    * DNS lookup speed and results using ``host -v``.

    * HTTP/HTTPS latency and responses -- with string, headers and status code
      check.

    * SSL certificate verification.

.. tag:: #admin

  ✗ Implement the configuration system for remonit.

    The config system should be painless to manage and support monitoring of
    various worst-case scenarios for the local ``remonit id``. The remonit app
    should also support live reloading of the config when sent a `SIGHUP
    <http://en.wikipedia.org/wiki/SIGHUP>`_.

.. tag:: #admin

  ✗ Implement a data persistence layer for remonit.

    The data gathered by remonit should be persisted to a local `Redis
    <http://code.google.com/p/redis/>`_ instance according to the configuration.
    The redis data should be pruned every so often and saved to S3 so that we
    have historic data for the future.

.. tag:: #admin

  ✗ Implement a notification system for remonit.

    Certain events from remonit's data gatherers should trigger configurable
    notifications. Notifications should support "dampeners" so as to avoid
    notification floods.

    There should be notifiers for email (via `SendGrid
    <http://sendgrid.com/>`_), SMS (via `BulkSMS <http://www.bulksms.co.uk/>`_),
    `Growl <http://growl.info/>`_ (OS X Desktop) and `Prowl
    <http://prowl.weks.net/>`_ (iPhone). Perhaps take a look at `aeservmon
    <http://github.com/mrsteveman1/aeservmon>`_ for any relevant code.

.. tag:: #admin

  ✗ Export the remonit data over a web interface.

    A basic web application should be implemented which exports the local
    remonit data as `JSONP <http://en.wikipedia.org/wiki/JSON#JSONP>`_ over HTTP
    with the following API:

    * ``/get/<id>`` -- return the full data associated with the given event ID.

    * ``/info/<profile>/<year>/<month>/<day>`` -- return a mapping of
      configuration IDs to a list of [timestamp, event ID, latency value, error
      state, optional throughput value] for the given date and profile.

    * ``/list/<profile>`` -- return a list of configurations (name, id and
      description) associated with the given profile.

    * ``/status/<year>/<month>/<day>`` -- return a mapping of profiles to a list
      of summary state (okay/disrupted) for the 8 days leading up to the
      specified date (including the current state).

.. tag:: #admin

  ✗ Setup off-site servers for running remonit.

    `Linode <http://www.linode.com>`_ provide a really nice VPS hosting service.
    We can setup one linode in the U.S. and another in the U.K. -- enabling us
    to have off-site monitoring of the North American and European Ampify data
    centers:

    * eu.status.ampify.it
    * us.status.ampify.it

    We'd need to find a decent Asian VPS host for monitoring our Asian data
    center when it goes live.

.. tag:: #admin

  ✗ Implement the status.ampify.it app.

    The app should should be implemented as a `Sinatra
    <http://www.sinatrarb.com/>`_ app on `Heroku <http://heroku.com>`_ as this
    would mean that the site would be on EC2 -- away from the rest of our
    deployment. The site should be pretty to look at as well as useful.

    It should take the JSON data from the various remonit web instances and
    display it as sexy `Google Charts
    <http://code.google.com/apis/charttools/>`_ like on the `App Engine Status
    <http://code.google.com/status/appengine/>`_ page. It should also support
    broadcast messages like on the `GitHub Status <http://status.github.com>`_
    site -- as well as scheduled maintenance announcements and calendar.


Hosting
-------

.. tag:: #admin, @evangineer, @tav

  ✓ Investigate cloud service providers.

    Choosing good hosting provider(s) is going to be important for the long-term
    success of Ampify. Unfortunately the current set of cloud services do not
    seem to be spectacularly attractive choices.

    Services like `Amazon EC2 <http://aws.amazon.com/ec2/>`_ are impressive from
    a technical perspective. For example, Amazon's Elastic Load Balancer makes
    what would otherwise be a pretty painful experience quite effortless.

    However, on the flip side, the abstractions also introduce a lot of
    additional complexities to manage. This is most notable with the case of
    Amazon's `Elastic Block Store <http://aws.amazon.com/ebs/>`_. Writing a file
    to disk involves half a dozen support structures!

    Cloud offerings also make very little sense from a financial perspective.
    Not only do comparable "raw metal" servers cost substantially less, but you
    also get a noticeable increase in raw performance.

    And, finally, multi-tenancy introduces a host of `novel security
    considerations <http://people.csail.mit.edu/tromer/papers/cloudsec.pdf>`_.
    Server management is complicated enough without having to worry about these
    and other gaming issues.

.. tag:: #admin, @evangineer, @tav

  ✓ Investigate dedicated server providers.

    `Hostway <http://www.hostway.com/dedicated-servers/>`_ seem to have quite a
    competitive offering with offers of good support and "100% uptime". The
    global distribution (North America, Europe, East Asia) of their data centers
    is also quite attractive with regards future expansion.

    Of the other providers, `Terremark <http://www.terremark.com>`_ looks quite
    impressive, but do not seem to be affordable at a small scale. `Codero
    <http://www.codero.com>`_ (USA) and `Hetzner <http://www.hetzner.de>`_
    (Germany) are very attractive price-wise, but may not have the most reliable
    network connectivity.

.. tag:: #admin, @tav, @evangineer, wip

  ✗ Investigate/negotiate deal with Hostway.

    There are a number of issues to verify:

    * What's their process for scheduled maintenance? Do they have an IRC
      channel for live support?

      * They don't have an IRC channel, but do offer 24x7 support and ticketing
        system.

    * What are their limitations with regards to provisioning new servers? At
      what rate can they handle orders for new servers?

      * They can deploy new servers (from any of their default configs) within
        24 hours, which could potentially be rushed. Custom configurations would
        take longer though.

    * What are our options about deploying across their `various data centers
      <http://www.hostway.com/infrastructure/>`_? What is the latency between
      these locations?

      * We can choose which data centers to deploy to.

    * Do they offer ECC RAM on their servers? What kind specifically?

      * Yes, the RAM on the servers we've been looking at is DDR3 ECC.

    * Do they offer servers with Gigabit NIC? This will be quite important for
      the frontend servers.

      * All servers are fitted with Gigabit NICs and it's quite easy to have the
        connection switched from 100Mb/s to 1Gb/s.

    * What happens when servers exceed their allocated 2TB bandwidth? Is
      "internal" bandwidth charged for? What about across their data centers?

      * Excess bandwidth is charged for at $0.35/GB. We can prebuy bandwidth
        (as long as it's over 2TB) at a rate of $0.09/GB.

      * We can arrange for our servers to be setup on a private switch in which
        case we wouldn't be charged for internal traffic.

    * Do they offer static IP addresses? What's their process for allocation of
      new address blocks?

    Tav and Mamading are currently engaged in a dialogue with Jamie Fryer from
    Hostway.


Finances
--------

.. tag:: #admin, @tav

  ✗ Have a pre-launch meeting with the accountant.

    Need to have a meeting with the accountant to go over a number of details,
    including:

    * VAT registration
    * Annual returns (due 31st March)

.. tag:: #admin, @olasofia, @tav

  ✓ Setup a bank account for Metanational Commons.

    A bank account has been setup with `HSBC <http://www.hsbc.co.uk/>`_ for
    Metanational Commons with Sofia having primary access to the account.

.. tag:: #admin, @tav

  ✓ Setup a Paypal account for Metanational Commons.

    A Paypal account has been setup, verified and linked to the HSBC account.

.. tag:: #admin, @tav

  ✓ Investigate payment processors for handling membership subscriptions.

    `Braintree <http://www.braintreepaymentsolutions.com/>`_ sound like a pretty
    awesome payment processor. They offer a combined merchant account and
    payment gateway. And their API is such that our servers `never have to
    <http://www.braintreepaymentsolutions.com/services/pci-compliance>`_ even
    touch user's credit card details!

.. tag:: #admin, @tav

  ✗ Contact Braintree.

    Tav has emailed Braintree asking about their pricing, sign up process and
    whether they already have a Python library for their API.


Admin
-----

.. tag:: #admin, @tav

    ✓ Setup source repository for Ampify.

      A repository has been setup on GitHub for the reasons outlined in our
      "`getting started with git
      <http://www.espians.com/getting-started-with-git.html#why-git>`_" article.
      It can be found at `github.com/tav/ampify
      <http://github.com/tav/ampify>`_.

      To clone the repo::

        git clone git://github.com/tav/ampify.git

      Those who've got write access should instead::

        git clone git@github.com:tav/ampify.git

.. tag:: #admin, @tav

  ✓ Buy ampify.it and related domains.

    The following domains have been bought:

    * ampify.it
    * ampifyit.com
    * ampify.me
    * ampify.org
    * ampify.net

    The domain ``ampify.com`` seems to be owned by someone called Bri Holt
    according to the `WHOIS records <http://whois.domaintools.com/ampify.com>`_.
    Tav has emailed him about buying the domain but hasn't heard anything back.
    Since people tend to search it's not really a problem, but would be very
    nice to have.

.. tag:: #admin, @tav, @olasofia

  ✓ Register Metanational Commons Ltd.

    The entity "Metanational Commons Ltd." has been officially registered with
    `Companies House <http://www.companieshouse.gov.uk/>`_ as Company No.
    ``06834341`` in England & Wales . The following individuals are the current
    officials for the company:

    * Tav (Vageesan Sivapathasundaram)
    * Sofia Bustamante

    The official address is at our accountant's place to make handling of admin
    forms easier.


Message
-------

Redis 32-bit

The message looks like:

.. syntax:: go

  type Message struct {
      from         string
      by           string
      to           string
      aspect       string
      content      string
      value_number big.Number
      value_list   []string
      version      int
  }

For example, the following message written by ``@tav`` and sent to ``#espians``::

    /balance ~/account

Would like the following in Ruby after being parsed:

.. syntax:: ruby

  {
    :from => "tav",
    :aspect => "/balance",
    :to => "#espians",
    :value_number => 9203180132
  }

Hmz

Asr

.. syntax:: pycon

  >>> nodule.init()
  [0, 'START']

  >>> status == 12
  True

  >>> def foo():
  ...     if N_set: return True
  [0, 'START']


* Git Review
* Tests
* Build
* Devboard (incl. contributor agreement)
* Documentation style + LICENSE

✗ http://code.google.com/p/tesseract-ocr/wiki/ReadMe
✗ Language detection
✗ Trust metrics calculation
✗ Temporal visualiser

Guess language

✗ Weather Theme as ambient system status indicator

✗ Nodules
✗ Language guesser

✓ Weblite base framework
✓ Weblite service loader
✓ Tamper-proof cookies
✓ HTTP only cookies

✓ Appengine manager script
✓ Remote API handler script
✓ Python third party dependencies

✓ Minification script
✓ Lint checker script
✗ Javascript third party dependencies

✗ Build script for jsutil
✗ Javascript testing framework
✗ Javascript testing runner

✗ nodebrowser.js builder
✗ nodebrowser.js port of env.js
✗ nodebrowser.js runner
✗ nodebrowser.js testing

http://www.cyberciti.biz/tips/setting-processor-affinity-certain-task-or-process.html
taskset (part of schedutils) for cpu affinity on linux

✗ Go build script
✗ Python testing framework
✗ Python testing runner

✗ Go testing framework
✗ Go testing runner

✗ Python client setup.py/build script
✗ Python client testing framework
✗ Python client testing runner

✗ Overview documentation
✗ Architecture documentation

✓ Appengine base yaml files
✓ Site configuration file
✓ Site secret file

✗ Main site template
✗ Main site css
✗ Border-based controls

✗ User identity framework
✗ User identity core model
✗ Invitation
✗ Membership
✗ Membership payment (via PayPal)
✗ Terms of service acceptance with updates

✗ Login
✗ Email
✗ OpenID
✗ Google
✗ Facebook
✗ Twitter
✗ Flickr
✗ Domains

✗ Profile (incl. Skype)
✗ Profile picture
✗ User settings/configuration

✗ App/service keys
✗ App revocation
✗ OAuth
✗ CSRF
✗ User quotas
✗ Scheduled/unscheduled maintenance support

✗ Item framework
✗ Item core model
✗ Item log model (trends, etc.)

✗ Item creation
✗ Sensor notification on create
✗ Aspect/value parsing
✗ Builtin types
✗ Item indexing
✗ Item attachment
✗ File uploading

✗ Private spaces (capabilities)
✗ Private space creation
✗ Private space invitation

✗ Reaction definition
✗ Builtin incr/decr reactions
✗ Calling of before/after reactions
✗ Private messaging
✗ Espra credits allocation
✗ Espra credits usage

✗ Item editing
✗ Item versioning
✗ Item positioning
✗ Item deleting

✗ Amp-ing
✗ Re-spacing
✗ Pecu-allocating
✗ Commenting
✗ Symlinking
✗ Original chain traversal

✗ Trustmap definition
✗ Trustmap query
✗ Trustmap editor
✗ Recursive trustmap

✗ Item search
✗ Search syntax
✗ Client-side search results merge
✗ Parallel query
✗ Merged aspect/value query

✗ Real-time update
✗ Live node
✗ Sensor network
✗ Sensor node
✗ Sensor pattern match finder

✗ Redis server
✗ Redis client

✗ Worker node
✗ Resync checker
✗ Web hooks POSTer

✗ HTTP server
✗ Server connection stats
✗ Web Sockets support
✗ Web Sockets client-side support
✗ Iframe client-side support

✗ HTTP cache: etags, last-modified, if-modified-since
✗ Client-side caches
✗ Item caches
✗ Dolumn-cached loading

✗ Session management
✗ Dolumns
✗ Scrolling

✗ Item views
✗ Listing view
✗ Calendar view
✗ Streak calendar view
✗ Map view
✗ Arbitrary view

✗ Autocompletion
✗ Autogrowing editor
✗ Inline editor
✗ Auto-preview
✗ Position editor
✗ Uploader
✗ Map location selector
✗ Date/time selector

✗ Widgets
✗ Error handling
✗ Error reporting
✗ Resync notification
✗ General notifications

✗ Userscripts definition
✗ Userstyles definition
✗ Background uploading
✗ Userscript hooks/ordering
✗ Safe login

✗ OEmbed
✗ OEmbed (Skitch)
✗ Longurls

✗ Links
✗ Includes
✗ XSS sanitation

✗ Lambdascript
✗ Lambdascript parser
✗ Lambdascript exec
✗ Builtins
✗ Unicode support
✗ Formatters
✗ I18n support
✗ I18n data
✗ Timezone support
✗ Timezone data
✗ Decimal support
✗ Queries
✗ Function definition
✗ Views
✗ Text type (rst, markdown, etc.)
✗ Paste type
✗ Syntax highlighting
✗ Pattern definition
✗ Pattern extraction

✗ Media player
✗ YouTube
✗ MP3s
✗ FlowPlayer

✗ Pecu app
✗ Pecu allocation
✗ Auto-allocation
✗ Top rated
✗ Top rated in period
✗ Pecu payouts
✗ Pecu integration with PayPal

✗ Shaila app
✗ Shaila creation mode
✗ Shaila grab: Flickr, Twitter, etc.
✗ Shaila browsing

✗ Packaged views
✗ Packaged views creator
✗ Packaged views verifier/installer

✗ GitHub integration
✗ Google calendar integration: in
✗ Google calendar integration: out

✗ RSS integration: in
✗ RSS integration: out
✗ Twitter integration: out

✗ Domain validation
✗ Domain view definition
✗ Domain view rendering

✗ Node logging support
✗ Node logging redis server
✗ Node log monitor app

✗ Visualisation framework
✗ Graph (trustmap-like) viewer
✗ Temporal viewer

✗ Email integration
✗ SMS integration
✗ XMPP integration
✗ Google Wave bot

✗ DNS setup
✗ AMI setup
✗ Nginx configuration
✗ Redis configuration
✗ Runner scripts
✗ Git repository app sync

IANA-reserved IPs

✗ Code activity on GitHub

✗ FAQs on Tender
✗ <meta name="verify-v1" content="aLcMPDDmDYvgufTDcJiiCOgPt/FOooMmGHiPj64BMbU=" />

✗ optimise page load with different asset subdomains
✗ fallback for when 2000 supporters reached
✗ redis-based stat.ampify.it
✗ Update HSBC IBAN/BIC details

✗ Main template
✗ Main css
✗ Main javascript
✗ Main index

✗ Blog template
✗ Blog index
✗ Blog rss
✗ Blog first entry

✗ Disqus on Blog
✗ Feedburner for Blog

✗ TypeKit

✗ Devboard template
✗ Devboard handler
✗ Devboard auth
✗ Devboard GitHub post receive
✗ Devboard breakpad
✗ Devboard tree status
✗ Devboard build status

✗ Devsite template
✗ Devsite index
✗ Devsite article: git review

✗ Planfile structure
✗ Planfile content
✗ Planfile diagrams

✗ Git review
✗ Git review config
✗ Git review style validator
✗ Git review gofmt
✗ Git review revhooks
✗ Git review watchlist
✗ Breakpad

✗ Build slave config
✗ Build slave runner
✗ Python test framework
✗ Python tests
✗ Go test framework
✗ Go tests
✗ Javascript test framework
✗ Javascript tests
✗ Test runner

✗ ./configure
✗ Makefile
✗ git update

✗ Paypal subscription docs
✗ Paypal subscription implementation
✗ Paypal subscription test

✗ Supporters site template
✗ Supporters site handler
✗ Supporters site auth
✗ Supporters site signup
✗ Supporters site model
✗ Supporters site post signup + initial mail
✗ Supporters site graphics
✗ Supporters site management

✗ Sendgrid subscription
✗ Supporters site sendgrid support
✗ Supporters site mail outs

✗ Trustmaps: update to the .com site
✗ Trustmaps: quick fixes
✗ Trustmaps: docs clean up
✗ Trustmaps: stream
✗ Trustmaps: article for blog
✗ Trustmaps: video

✗ App engine rate limit increase: trustmaps
✗ App engine rate limit increase: supporters
✗ Twitter rate limit increase
✗ Change passwords (twitter, facebook, gmail, etc.)

✗ Espians website articles

✗ Video storyline
✗ Video imagery
✗ Video writing
✗ Video voice
✗ Video music
✗ Video upload

✗ DNS settings
✗ Apache setup
✗ Possibly get a linode backup + DNS changes
✗ Blog article on ampify
✗ Email espians

✗ Post: ping.fm, espians fb/twitter, ampify twitter
✗ DM twitter followers framework
✗ DM twitter followers


http://docs.jquery.com/QUnit
http://ejohn.org/blog/test-swarm-alpha-open/
http://github.com/jelmer/dulwich/blob/master/dulwich/server.py
http://github.com/jeresig/testswarm/
http://testswarm.com/
http://testswarm.com/job/2/
http://www.austintek.com/LVS/LVS-HOWTO/HOWTO/LVS-HOWTO.rewrite_ports.html
http://github.com/lg/murder
http://66.102.9.132/search?q=cache:eWcESlDEifAJ:open-content.net/specs/draft-jchapweske-thex-02.html+thex+content&cd=3&hl=en&ct=clnk&client=safari

http://code.google.com/p/google-caja/wiki/CajaCajole
http://www.codebasehq.com/features

http://howtonode.org/do-it-fast
http://howtonode.org/control-flow-part-ii
http://github.com/creationix/do#readme
http://ejohn.org/blog/ecmascript-5-objects-and-properties/
http://code.google.com/p/google-caja/wiki/JsHtmlSanitizer

http://standardinterface.org/
http://github.com/280north/aristo

http://allmydata.org/source/tahoe-lafs/trunk/docs/about.html

https://calomel.org/nginx.html

http://api.pyamf.org/
http://fmspy.org/docs/en/userguide.html#features
http://sziebert.net/posts/server-side-stream-recording-updated/
http://rtmpy.org/wiki/IrcChannel

http://linux.softpedia.com/get/Programming/Libraries/redis-queue-54702.shtml

http://news.ycombinator.com/item?id=180311

http://code.google.com/p/pycopia/

.. raw:: html

  <style type="text/css">
  #message, #remaining-blah, #node-structure, #argonought, #continuous-integration {
    display: none !important;
  }
  </style>
