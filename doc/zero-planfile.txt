---
license: Public Domain
layout: page
title: Zero Planfile
---

Zero Planfile
=============

Ampify Zero is building on top of existing technologies like Caja, jQuery, Git,
App Engine, Go, Node.js, Python, Redis, S3, Sendgrid, Twilio and V8 as an
initial step towards the decentralised vision of ``Ampify 1.0``. It is intended
as a working demo and nothing more.


Node Structure
--------------

A Node is started up using the ``ampnode`` executable.

On startup all nodes establish a connection to the Seed node.

.. class:: ascii-art

::

       +----------------+
       | Internet Horde |
       +----------------+
             |                                  +-------------+
             |             +-----------+        | Other Nodes |
             ±             | Seed Node |        +-------------+
             |             +-----------+              |
             |              |     \                   |
         +-------------+    |      \                  |
         | Public Port |    |     +----------------------------------+
         +-------------+    |     | Meta Port (Internal Access Only) |
                \           |     +----------------------------------+
                 \          |       /
                  \         |      /
       +===========\========|=====/====================================+
       |            \       |    /                                     |
       |          +----------------------+                             |
       |          | Node: Parent Process |                             |
       |          +----------------------+                             |
       |                   |                                           |
       |                   |                                           |
       |    +-------------------------+-----------------------+        |
       |    |                         |                       |        |
       |  +----------------+          |            +----------------+  |
       |  | Nodule Process |  +----------------+   | Nodule Process |  |
       |  +----------------+  | Nodule Process |   +----------------+  |
       |                      +----------------+                       |
       |                                                               |
       +===============================================================+


Argonought
----------

Argonought is a JSON-inspired serialisation format that offers us features not
available in other formats:

* JSON-like simplicty.
* Efficient binary encoding.
* Lexicographically sortable encoding.

As an example, consider how you would sort *really* long numbers on datastores
like Google App Engine or SimpleDB. The latter only allows you to store strings
and the former truncates anything greater than 64bits.

.. syntax:: irb

  >> (2 ** 29).class
  => Fixnum

  >> (2 ** 30).class
  => Bignum

The official documentation for SimpleDB
`recommends <http://developer.amazonwebservices.com/connect/entry.jspa?categoryID=152&externalID=1232>`_

.. syntax:: pycon

  >>> '9' > '8'
  True

  >>> '10' > '9'
  False

Argonought takes care of all of this hassle:


.. syntax:: pycon

  >>> argonought.pack_number(8234364)
  '\xfe\xa2\xa0'

  >>> a.pack_number(8234364) > a.pack_number(-234364)
  True


Message
-------

The message looks like:

.. syntax:: go

  type Message struct {
      from         string
      by           string
      to           string
      aspect       string
      content      string
      value_number big.Number
      value_list   []string
      version      int
  }

For example, the following message written by ``@tav`` and sent to ``#espians``::

    /balance ~/account

Would like the following in Ruby after being parsed:

.. syntax:: ruby

  {
    :from => "tav",
    :aspect => "/balance",
    :to => "#espians",
    :value_number => 9203180132
  }

Hmz

Asr

.. syntax:: pycon

  >>> nodule.init()
  [0, 'START']

  >>> status == 12
  True

  >>> def foo():
  ...     if N_set: return True
  [0, 'START']


* Git Review
* Tests
* Build
* Devboard (incl. contributor agreement)
* Documentation style + LICENSE

Hosting
-------

✓ Investigate cloud service providers.

  Choosing good hosting provider(s) is going to be important for the long-term
  success of Ampify. Unfortunately the current set of cloud services do not seem
  to be spectacularly attractive choices.

  Services like `Amazon EC2 <http://aws.amazon.com/ec2/>`_ are impressive from a
  technical perspective. For example, Amazon's Elastic Load Balancer makes what
  would otherwise be a pretty painful experience quite effortless.

  However, on the flip side, the abstractions also introduces a lot of
  additional complexities to manage. This is most notable with the case of >
  Amazon's `Elastic Block Store <http://aws.amazon.com/ebs/>`_. Writing a file
  to disk now involves half a dozen support structures!

  Cloud offerings also make very little sense from a financial perspective. Not
  only do comparable "raw metal" servers cost substantially less, but you also
  get a noticeable increase in raw performance.

  And, finally, multi-tenancy introduces a host of `novel security
  considerations <http://people.csail.mit.edu/tromer/papers/cloudsec.pdf>`_.
  Server management is complicated enough without having to worry about these
  and other gaming issues.

✓ Investigate dedicated server providers.

  `Hostway <http://www.hostway.com/dedicated-servers/>`_ seem to have quite a
  competitive offering with offers of good support and 100% uptime. The global
  distribution (North America, Europe, East Asia) of their data centers is also
  quite attractive with regards future expansion.

  Of the other providers, `Terremark <http://www.terremark.com>`_ looks quite
  impressive, but do not seem to be affordable at a small scale. `Codero
  <http://www.codero.com>`_ (USA) and `Hetzner <http://www.hetzner.de>`_
  (Germany) are attractive price-wise, however they don't seem to be too
  reliable with regards network connectivity.

✗ Investigate/negotiate deal with Hostway.

  There are a number of issues to verify:

  * What's their process for scheduled maintenance? Do they have an IRC channel
    for live support?

    * They don't have an IRC channel, but do offer 24x7 support and ticketing
      system.

  * What are their limitations with regards to provisioning new servers? At what
    rate can they handle orders for new servers?

    * They can deploy new servers (from any of their default configs) within 24
      hours, which could potentially be rushed. Custom configurations would take
      longer though.

  * What are our options about deploying across their `various data centers
    <http://www.hostway.com/infrastructure/>`_? What is the latency between
    these locations?

    * We can choose which data centers to deploy to.

  * Do they offer ECC RAM on their servers? What kind specifically?

    * Yes, the RAM on the servers we've been looking at is DDR3 ECC.

  * Do they offer servers with Gigabit NIC? This will be quite important for the
    frontend servers.

    * All servers are fitted with Gigabit NICs.

  * What happens when servers exceed their allocated 2TB bandwidth? Is "internal"
    bandwidth charged for? What about across their data centers?

    * Excess bandwidth is charged for. We can prebuy various bandwidth plans.
      And with regards internal traffic, we can arrange for our servers to be
      setup on a private switch.

  * Do they offer static IP addresses? What's their process for allocation of new
    address blocks?

  Tav is currently engaged in a dialogue with Jamie Fryer from Hostway.

    ✗ http://code.google.com/p/tesseract-ocr/wiki/ReadMe
    ✗ Language detection
    ✗ Trust metrics calculation

Guess language

✗ Weather Theme as ambient system status indicator

✗ Nodules
✗ Language guesser

The absolute basics:

    ✓ Setup git repository for ampify
    ✗ Buy SSL certificate
    ✓ Buy ampify.it
    ✗ Send in verification documents to the Italian registrar
    ✗ Buy ampify.im | .com variants

And, then:

✓ Weblite base framework
✓ Weblite service loader
✓ Tamper-proof cookies
✓ HTTP only cookies

✓ Appengine manager script
✓ Remote API handler script
✓ Python third party dependencies

✓ Minification script
✓ Lint checker script
✗ Javascript third party dependencies

✗ Build script for jsutil
✗ Javascript testing framework
✗ Javascript testing runner

✗ nodebrowser.js builder
✗ nodebrowser.js port of env.js
✗ nodebrowser.js runner
✗ nodebrowser.js testing

✗ Python testing framework
✗ Python testing runner

✗ Go build script
✗ Go testing framework
✗ Go testing runner

✗ Python client setup.py/build script
✗ Python client testing framework
✗ Python client testing runner

✗ Overview documentation
✗ Architecture documentation

✓ Appengine base yaml files
✓ Site configuration file
✓ Site secret file

✗ Main site template
✗ Main site css
✗ Border-based controls

✗ User identity framework
✗ User identity core model
✗ Invitation
✗ Membership
✗ Membership payment (via PayPal)
✗ Terms of service acceptance with updates

✗ Login
✗ Email
✗ OpenID
✗ Google
✗ Facebook
✗ Twitter
✗ Flickr
✗ Domains

✗ Profile (incl. Skype)
✗ Profile picture
✗ User settings/configuration

✗ App/service keys
✗ App revocation
✗ OAuth
✗ CSRF
✗ User quotas
✗ Scheduled/unscheduled maintenance support

✗ Item framework
✗ Item core model
✗ Item log model (trends, etc.)

✗ Item creation
✗ Sensor notification on create
✗ Aspect/value parsing
✗ Builtin types
✗ Item indexing
✗ Item attachment
✗ File uploading

✗ Private spaces (capabilities)
✗ Private space creation
✗ Private space invitation

✗ Reaction definition
✗ Builtin incr/decr reactions
✗ Calling of before/after reactions✗ 
✗ Private messaging
✗ Espra credits allocation
✗ Espra credits usage

✗ Item editing
✗ Item versioning
✗ Item positioning
✗ Item deleting

✗ Amp-ing
✗ Re-spacing
✗ Pecu-allocating
✗ Commenting
✗ Symlinking
✗ Original chain traversal

✗ Trustmap definition
✗ Trustmap query
✗ Trustmap editor
✗ Recursive trustmap

✗ Item search
✗ Search syntax
✗ Client-side search results merge
✗ Parallel query
✗ Merged aspect/value query

✗ Real-time update
✗ Live node
✗ Sensor network
✗ Sensor node
✗ Sensor pattern match finder

✗ Redis server
✗ Redis client

✗ Worker node
✗ Resync checker
✗ Web hooks POSTer

✗ HTTP server
✗ Server connection stats
✗ Web Sockets support
✗ Web Sockets client-side support
✗ Iframe client-side support

✗ HTTP cache: etags, last-modified, if-modified-since
✗ Client-side caches
✗ Item caches
✗ Dolumn-cached loading

✗ Session management
✗ Dolumns
✗ Scrolling

✗ Item views
✗ Listing view
✗ Calendar view
✗ Streak calendar view
✗ Map view
✗ Arbitrary view

✗ Autocompletion
✗ Autogrowing editor
✗ Inline editor
✗ Auto-preview
✗ Position editor
✗ Uploader
✗ Map location selector
✗ Date/time selector

✗ Widgets
✗ Error handling
✗ Error reporting
✗ Resync notification
✗ General notifications

✗ Userscripts definition
✗ Userstyles definition
✗ Background uploading
✗ Userscript hooks/ordering
✗ Safe login

✗ OEmbed
✗ OEmbed (Skitch)
✗ Longurls

✗ Links
✗ Includes
✗ XSS sanitation

✗ Lambdascript
✗ Lambdascript parser
✗ Lambdascript exec
✗ Builtins
✗ Unicode support
✗ Formatters
✗ I18n support
✗ I18n data
✗ Timezone support
✗ Timezone data
✗ Decimal support
✗ Queries
✗ Function definition
✗ Views
✗ Text type (rst, markdown, etc.)
✗ Paste type
✗ Syntax highlighting
✗ Pattern definition
✗ Pattern extraction

✗ Media player
✗ YouTube
✗ MP3s
✗ FlowPlayer

✗ Pecu app
✗ Pecu allocation
✗ Auto-allocation
✗ Top rated
✗ Top rated in period
✗ Pecu payouts
✗ Pecu integration with PayPal

✗ Shaila app
✗ Shaila creation mode
✗ Shaila grab: Flickr, Twitter, etc.
✗ Shaila browsing

✗ Packaged views
✗ Packaged views creator
✗ Packaged views verifier/installer

✗ GitHub integration
✗ Google calendar integration: in
✗ Google calendar integration: out

✗ RSS integration: in
✗ RSS integration: out
✗ Twitter integration: out

✗ Domain validation
✗ Domain view definition
✗ Domain view rendering

✗ Node logging support
✗ Node logging redis server
✗ Node log monitor app

✗ Visualisation framework
✗ Graph (trustmap-like) viewer
✗ Temporal viewer

✗ Email integration
✗ SMS integration
✗ XMPP integration
✗ Google Wave bot

✗ EC2 setup
✗ ELB setup
✗ DNS setup
✗ AMI setup
✗ Nginx configuration
✗ Redis configuration
✗ Runner scripts
✗ Git repository app sync
