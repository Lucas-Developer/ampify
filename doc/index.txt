---
layout: page
license: Public Domain
---

Ampify
======

Ampify is a vision of an open and decentralised application platform. For
comparison, perhaps imagine a bastardised mix between Git, Facebook, Unix, IRC,
App Engine, Xanadu and Wikis.

The goal for the final 1.0 release is to have a fully decentralised "internet
operating system" style platform. We're currently working towards an initial
release, ``Ampify Zero``, for the end of this year -- `see the planfile
<planfile.html>`_ for more info.


Get Started
-----------

You need to have `Git <http://git-scm.com/>`_, a Unix-like OS, a recent Python
2.x and general dev tools (gcc, make, etc.) installed.

.. syntax:: bash

  $ git clone git://github.com/tav/ampify.git   # (1)
  $ cd ampify
  $ source environ/ampenv.sh                    # (2)
  $ git update                                  # (3)
  $ ./configure                                 # (4)
  $ make                                        # (5)
  $ less doc/running-ampify-zero.txt            # (6)

1. Clone the repository. If you have Git 1.7+, you should use the more efficient
   smart HTTP protocol:

   .. syntax:: bash

     $ git clone http://github.com/tav/ampify.git

2. The ``ampenv.sh`` script currently only works on bash shells where it sets up
   Ampify related environment variables like ``$AMPIFY_ROOT``, ``$PATH``, &c.

3. The new ``git update`` command will now be accessible and you should use it
   to keep the repository updated from now on. It takes care of both pulling and
   keeping git submodules updated. This only works with recent versions of Git
   -- otherwise you'd need to init/update the submodules yourself:

   .. syntax:: bash

     $ git submodule update --init

4. The ``configure`` step verifies that you have the necessary base
   dependencies. You can give it a ``--prefix`` parameter, but that's currently
   meaningless as all "installations" are self-contained within the
   ``environ/local`` sub-directory that will be automatically created.

5. Running ``make`` is currently equivalent to ``make zero`` which builds
   various dependencies like Node.js, compiles CoffeeScript/Sass files and
   minifies the resulting JavaScript/CSS files.

   You can run ``make clean`` to remove everything except the built
   dependencies, which you can also remove using the full ``make distclean``. Be
   sure to re-run ``make`` after you do a git pull or update -- this will keep
   the generated files up-to-date.

   Behind the scenes, ``make`` calls the ``waf`` build system. If the colours
   are not agreeable to you, you can disable them by setting the ``NOCOLOR``
   environment variable before calling ``make``, e.g.

   .. syntax:: bash

     $ NOCOLOR=1 make

   Please note that running ``make`` for the first time currently takes around
   20 minutes, so you might want to grab something to drink and do something
   else like read `HN <http://news.ycombinator.com/>`_ or `xkcd
   <http://xkcd.com/>`_ -- with an eye on your terminal for any errors that
   might occur.

6. This last step points you to the `Running Ampify Zero
   <running-ampify-zero.html>`_ document. As it states, Ampify Zero doesn't work
   yet, but it goes into detail of how an instance is meant to be setup and run.

   You first initialise an instance using the ``amp`` utility script. This asks
   you a few questions and generates the appropriate files in a sibling
   directory to your Ampify repository. So, if you wanted to create an instance
   called ``kickass``, you'd:

   .. syntax:: bash

     $ amp init kickass

   Then, you'd run the various component processes of Ampify Zero with:

   .. syntax:: bash

     $ amp run kickass

   Do read the `Running Ampify Zero <running-ampify-zero.html>`_ doc for more
   info.


Get Involved
------------

* Come by and say hello and introduce yourself on `IRC
  <irc://irc.freenode.net/esp>`_ -- we're a friendly bunch!

.. raw:: html

  <div style="text-align: center; margin-top: 5px; margin-bottom: 15px">
      <form action="http://webchat.freenode.net/" method="get">
        <button style="padding: 2px 6px 3px;">Click to join #esp</button>
        <input type="hidden" name="channels" value="esp" />
     </form>
  </div>

  <pre>
  server: irc.freenode.net
  channel: #esp
  chatlogs: <a href="http://irclogs.ampify.it">irclogs.ampify.it</a>
  </pre>

* Subscribe to the `Ampify mailing list
  <http://groups.google.com/group/ampify>`_.

.. raw:: html

  <div style="text-align: center; margin-top: 5px; margin-bottom: 15px">
    <a href="http://groups.google.com/group/ampify"><img
       src="http://groups.google.com/intl/en/images/logos/groups_logo_sm.gif"
       height="30px" width="140px" alt="Google Groups"></a>
    <form action="http://groups.google.com/group/ampify/boxsubscribe">
      <input type="text" name="email" value="" size="20" placeholder="Your email address" > &nbsp;
      <input type="submit" name="sub" value="Subscribe">
    </form>
  </div>

* Sign up to GitHub if you don't have an `account
  <https://github.com/signup/free>`_ — it takes just a minute! You can then
  `fork <http://help.github.com/forking/>`_ the `ampify repository
  <http://github.com/tav/ampify>`_ and send `pull requests
  <http://github.com/guides/pull-requests>`_ with any changes you might have.

.. syntax:: bash

  $ git clone git@github.com:yourUsername/ampify.git
  $ git remote add upstream git://github.com/tav/ampify.git

* Read the `getting started with git
  <http://www.espians.com/getting-started-with-git.html>`_ guide for Ampify
  Developers if you're new to git.

* Familiarise yourself with the Ampify testing and review process.

.. syntax:: bash

  # commit your changes to your local repository.
  $ git commit

  # submit an issue to be reviewed on
  # http://codereview.appspot.com — running this also
  # checks with appropriate local revhooks before your
  # submission is made.
  $ git review submit 

  # make any changes and keep committing and submitting
  # updates on the issue until the reviewers give a
  # LGTM (Looks Good To Me) reply.

  # once you have an okay, squash your various commits
  # into a single commit and push to the remote
  # repository.
  $ git review push

* Have fun!