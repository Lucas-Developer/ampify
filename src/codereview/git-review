#! /usr/bin/env python

# Changes to this file by The Ampify Authors are according to the
# Public Domain license that can be found in the root LICENSE file.

# This file was adapted from git-cl by Evan Martin and git_cl_hook.py in the
# Chromium depot_tools repository and has the following License:

# Copyright (c) 2008 Evan Martin <martine@danga.com>
# Copyright (c) 2009 The Chromium Authors.
# All rights reserved.

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
# * Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
# * Neither the name of the author nor the names of contributors may be
#   used to endorse or promote products derived from this software without
#   specific prior written permission.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
# IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
# OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

"""git-review -- a git-command for integrating codereview."""

import os
import re
import subprocess
import sys

from getpass import getpass
from optparse import OptionParser
from tempfile import mkstemp
from textwrap import TextWrapper
from urllib2 import urlopen

from upload import EncodeMultipartFormData, RealMain, HttpRpcServer

from pyutil.env import exit, run_command
from pyutil.scm import is_git, SCMConfig

# ------------------------------------------------------------------------------
# some konstants
# ------------------------------------------------------------------------------

ERROR_MESSAGE = 'You must configure %s by running "git review init".'

SCM = SCMConfig()

# ------------------------------------------------------------------------------
# konfig related utility funktions
# ------------------------------------------------------------------------------

def GetConfigValue(name, title, exit_if_not_set=True):
  value = SCM.get('codereview.%s' % name)
  if exit_if_not_set and not value:
    exit(ERROR_MESSAGE % title)
  return value

def GetServer(exit=True):
  """Return the codereview server config value."""
  return GetConfigValue('server', "the Codereview Server", exit)


def GetTreeStatusUrl(exit=False):
  """Return the codereview tree status url config value."""
  return GetConfigValue('tree-status-url', "the Tree Status URL", exit)


def GetCCList(exit=False):
  """Return the codereview cc list config value."""
  cc = GetConfigValue('cc', "the CC List", exit)
  more_cc = GetConfigValue('extracc', "the Extra CC List", False)
  if more_cc:
    if cc:
      cc += ',' + more_cc
    else:
      cc = more_cc
  return cc

# ------------------------------------------------------------------------------
# other utility funktions
# ------------------------------------------------------------------------------

def RunGit(*args, **kwargs):
  """Run the given Git command arguments and return the output."""
  args = ['git'] + list(args)
  kwargs.setdefault('redirect_stderr', False)
  return run_command(args, **kwargs).strip()


def GetIssueURL(issue):
  """Get the URL for a particular issue."""
  return 'http://%s/%s' % (GetServer(), issue)


def GetShortBranchName(branch):
  """Convert a branch name like 'refs/heads/foo' to just 'foo'."""
  return branch.replace('refs/heads/', '')


def GetUserCredentials():
  """Return the user credentials as acquired from the user."""
  email = raw_input('Email: ').strip()
  password = getpass('Password for %s: ' % email)
  return email, password

def GetUserPasswordFunction(email):
  def _GetUserCredentials():
    password = getpass('Password for %s: ' % email)
    return email, password
  return _GetUserCredentials

# ------------------------------------------------------------------------------
# kore changelist klass
# ------------------------------------------------------------------------------

class ChangeList(object):

  def __init__(self, branchref=None):
    # Poke settings so we get the "configure your server" message if necessary.
    GetServer()
    self.branchref = branchref
    if self.branchref:
      self.branch = GetShortBranchName(self.branchref)
    else:
      self.branch = None
    self.upstream_branch = None
    self.has_issue = False
    self.issue = None
    self.has_description = False
    self.description = None

  def GetBranch(self):
    """Return the short branch name, e.g. 'master'."""
    if not self.branch:
      self.branchref = RunGit('symbolic-ref', 'HEAD')
      self.branch = GetShortBranchName(self.branchref)
    return self.branch

  def GetBranchRef(self):
    """Returns the full branch name, e.g. 'refs/heads/master'."""
    self.GetBranch()  # Poke the lazy loader.
    return self.branchref

  def FetchUpstreamTuple(self):
    """
    Return a tuple containing the remote and remote ref, e.g.
    ('origin', 'refs/heads/master')

    """
    remote = '.'
    branch = self.GetBranch()
    upstream_branch = RunGit('config', 'branch.%s.merge' % branch)
    if upstream_branch:
      remote = RunGit('config', 'branch.%s.remote' % branch)
    else:
      # Fall back on origin/master if it exits.
      if RunGit('branch', '-r').split().count('origin/master'):
        remote = 'origin'
        upstream_branch = 'refs/heads/master'
      else:
        exit("""Unable to determine default branch to diff against.
Either pass complete "git diff"-style arguments, like
  git review submit origin/master
or verify this branch is set up to track another (via the --track argument to
"git checkout -b ...").""")
    return remote, upstream_branch

  def GetUpstreamBranch(self):
    if self.upstream_branch is None:
      remote, upstream_branch = self.FetchUpstreamTuple()
      if remote is not '.':
        upstream_branch = upstream_branch.replace('heads', 'remotes/' + remote)
      self.upstream_branch = upstream_branch
    return self.upstream_branch
  # @@
  def GetIssue(self):
    if not self.has_issue:
      issue = RunGit('config', self._IssueSetting())
      if issue:
        self.issue = issue
      else:
        self.issue = None
      self.has_issue = True
    return self.issue

  def GetIssueURL(self):
    return IssueURL(self.GetIssue())

  def GetDescription(self, pretty=False):
    if not self.has_description:
      if self.GetIssue():
        url = self.GetIssueURL() + '/description'
        self.description = urlopen(url).read().strip()
      self.has_description = True
    if pretty:
      wrapper = TextWrapper()
      wrapper.initial_indent = wrapper.subsequent_indent = '  '
      return wrapper.fill(self.description)
    return self.description

  def GetPatchset(self):
    if not self.has_patchset:
      patchset = RunGit('config', self._PatchsetSetting())
      if patchset:
        self.patchset = patchset
      else:
        self.patchset = None
      self.has_patchset = True
    return self.patchset

  def SetPatchset(self, patchset):
    """Set this branch's patchset.  If patchset=0, clears the patchset."""
    if patchset:
      RunGit('config', self._PatchsetSetting(), str(patchset))
    else:
      RunGit('config', '--unset', self._PatchsetSetting())
    self.has_patchset = False

  def SetIssue(self, issue):
    """Set this branch's issue.  If issue=0, clears the issue."""
    if issue:
      RunGit('config', self._IssueSetting(), str(issue))
    else:
      RunGit('config', '--unset', self._IssueSetting())
      self.SetPatchset(0)
    self.has_issue = False

  def CloseIssue(self):
    rpc_server = HttpRpcServer(GetServer(),
                               GetUserCredentials,
                               host_override=GetServer(),
                               save_cookies=True)
    # You cannot close an issue with a GET.
    # We pass an empty string for the data so it is a POST rather than a GET.
    data = [("description", self.description),]
    ctype, body = EncodeMultipartFormData(data, [])
    rpc_server.Send('/' + self.GetIssue() + '/close', body, ctype)

  def _IssueSetting(self):
    """Return the git setting that stores this change's issue."""
    return 'branch.%s.codereviewissue' % self.GetBranch()

  def _PatchsetSetting(self):
    """Return the git setting that stores this change's most recent patchset."""
    return 'branch.%s.codereviewpatchset' % self.GetBranch()

# ------------------------------------------------------------------------------
# git review init
# ------------------------------------------------------------------------------

def CmdInit(args):
  parser = OptionParser(usage='git review init [options]')
  parser.add_option(
    '-f', '--force', action='store_true',
    help='overwrite any pre-existing config values'
    )
  parser.add_option(
    '-c', '--clean', action='store_true',
    help='remove all pre-existing config values'
    )
  options, args = parser.parse_args(args)
  if options.clean:
    SCM.delete('codereview', section=True)
    return
  config_file = open(os.path.join(SCM.root, '.codereview.cfg'), 'rb')
  UpdateCodereviewSettings(config_file, options.force)


def UpdateCodereviewSettings(file, force=False):
  """Update .git/config from settings in the .codereview.cfg file."""

  settings = {}
  first_time_error = " [to override, use: git review init --force]"

  def NormaliseOptionName(name):
    return name.lower().replace('_', '-')

  for line in file.read().splitlines():
    if not line or line.startswith("#"):
      continue
    key, value = map(str.strip, line.split(": ", 1))
    key = 'codereview.%s' % NormaliseOptionName(key)
    if force:
      SCM.set(key, value)
    else:
      if not SCM.get(key):
        SCM.set(key, value)
      else:
        print "Already set: %s%s" % (key, first_time_error)
        first_time_error = ''

  user_config_url = SCM.get('codereview.user-config-url')
  if not user_config_url:
    exit("Couldn't find the 'user-config-url' setting to download from.")

  user_config_server = user_config_url.split('://', 1)[1].split('/')[0]
  email = SCM.get('codereview.email')

  if not email:
    while not email:
      email = raw_input(
        "What's your email username for %s ? " % user_config_server
        ).strip()
    SCM.set('codereview.email', email)

  if not SCM.get('codereview.key'):
    print "Downloading user settings from: %s" % user_config_url
    rpc_server = HttpRpcServer(
      user_config_server, GetUserPasswordFunction(email),
      host_override=user_config_server, save_cookies=True
      )
    rpc_server._Authenticate()
    request = rpc_server._CreateRequest(user_config_url)
    user_config_stream = rpc_server.opener.open(request)
    user_config = user_config_stream.read()
    user_config_stream.close()
    print repr(user_config)
    for line in user_config.splitlines():
      if not line or line.startswith("#"):
        continue
      key, value = map(str.strip, line.split(": ", 1))
      key = 'codereview.%s' % NormaliseOptionName(key)
      if force:
        SCM.set(key, value)
      else:
        if not SCM.get(key):
          SCM.set(key, value)
        else:
          print "Already set: %s%s" % (key, first_time_error)
          first_time_error = ''

# ------------------------------------------------------------------------------
# git review status
# ------------------------------------------------------------------------------

def CmdStatus(args):

  parser = OptionParser(usage='git review status [options]')
  parser.add_option('--field', help='print only specific field (desc|id|url)')
  options, args = parser.parse_args(args)

  # TODO: maybe make show_branches a flag if necessary.
  show_branches = not options.field

  if show_branches:
    branches = RunGit('for-each-ref', '--format=%(refname)', 'refs/heads')
    if branches:
      print 'Branches associated with reviews:'
      for branch in sorted(branches.splitlines()):
        cl = ChangeList(branchref=branch)
        print "  %10s: %s" % (cl.GetBranch(), cl.GetIssue())

  cl = ChangeList()
  if options.field:
    if options.field.startswith('desc'):
      print cl.GetDescription()
    elif options.field == 'id':
      print cl.GetIssue()
    elif options.field == 'url':
      print cl.GetIssueURL()
  else:
    print
    print 'Current branch:',
    if not cl.GetIssue():
      print 'no issue assigned.'
      return 0
    print cl.GetBranch()
    print 'Issue number:', cl.GetIssue(), '(%s)' % cl.GetIssueURL()
    print 'Issue description:'
    print cl.GetDescription(pretty=True)


def CmdIssue(args):
  parser = OptionParser(usage='git review issue [issue_number]')
  parser.description = ('Set or display the current code review issue. ' +
                        'Pass issue number 0 to clear the current issue.')
  options, args = parser.parse_args(args)

  cl = ChangeList()
  if len(args) > 0:
    cl.SetIssue(int(args[0]))
  print 'Issue number:', cl.GetIssue(), '(%s)' % cl.GetIssueURL()


def UserEditedLog(starting_text):
  """Given some starting text, let the user edit it and return the result."""
  editor = os.getenv('EDITOR', 'vi')

  file_handle, filename = mkstemp()
  file = os.fdopen(file_handle, 'w')
  file.write(starting_text)
  file.close()

  ret = subprocess.call(editor + ' ' + filename, shell=True)
  if ret != 0:
    os.remove(filename)
    return

  file = open(filename)
  text = file.read()
  file.close()
  os.remove(filename)
  stripcomment_re = re.compile(r'^#.*$', re.MULTILINE)
  return stripcomment_re.sub('', text).strip()


def RunHook(hook, upstream_branch=None, error_ok=False):
  """Run a given hook if it exists.  By default, we fail on errors."""
  # upstream_branch used to default to 'origin'
  hook = '%s/%s' % (SCM.root, hook)
  if not os.path.exists(hook):
    return
  if not upstream_branch:
    upstream_branch = ChangeList().GetUpstreamBranch()
  output = RunCommand([hook, upstream_branch], error_ok).strip()
  if output != '':
    print output


def CmdPresubmit(args):
  """Reports what presubmit checks on the change would report."""
  parser = OptionParser(
      usage='git review [options]')
  parser.add_option('--push-only', action='store_true', dest='push_only',
                    help='only run the push presubmit hook')
  parser.add_option('--submit-only', action='store_true', dest='upload_only',
                    help='only run the upload presubmit hook')
  options, args = parser.parse_args(args)

  if RunGit('diff-index', 'HEAD'):
    print 'Cannot review with a dirty tree. You must commit locally first.'
    return 1

  if not options.push_only:
    print '*** Presubmit checks for SUBMIT would report: ***'
    RunHook(PREUPLOAD_HOOK, error_ok=True)

  if not options.upload_only:
    print '*** Presubmit checks for PUSH would report: ***'
    RunHook(PREPUSH_HOOK, error_ok=True)


def CmdSubmit(args):
  parser = OptionParser(
      usage='git review submit [options] [args to "git diff"]')
  parser.add_option('--bypass-hooks', action='store_true', dest='bypass_hooks',
                    help='bypass upload presubmit hook')
  parser.add_option('-m', dest='message', help='message for patch')
  parser.add_option('-r', '--reviewers',
                    help='reviewer email addresses')
  parser.add_option('--send-mail', action='store_true',
                    help='send email to reviewer immediately')
  options, args = parser.parse_args(args)

  if RunGit('diff-index', 'HEAD'):
    print 'Cannot upload with a dirty tree.  You must commit locally first.'
    return 1

  cl = ChangeList()
  if args:
    base_branch = args[0]
  else:
    # Default to diffing against the "upstream" branch.
    base_branch = cl.GetUpstreamBranch()
    args = [base_branch + "..."]

  if not options.bypass_hooks:
    RunHook(PREUPLOAD_HOOK, upstream_branch=base_branch, error_ok=False)

  # --no-ext-diff is broken in some versions of Git, so try to work around
  # this by overriding the environment (but there is still a problem if the
  # git config key "diff.external" is used).
  env = os.environ.copy()
  if 'GIT_EXTERNAL_DIFF' in env: del env['GIT_EXTERNAL_DIFF']
  subprocess.call(['git', 'diff', '--no-ext-diff', '--stat', '-M'] + args,
                  env=env)

  upload_args = ['--assume_yes']  # Don't ask about untracked files.
  upload_args.extend(['--server', GetServer()])
  if options.reviewers:
    upload_args.extend(['--reviewers', options.reviewers])
  upload_args.extend(['--cc', GetCCList()])
  if options.message:
    upload_args.extend(['--message', options.message])
  if options.send_mail:
    if not options.reviewers:
      exit("Must specify reviewers to send email.")
    upload_args.append('--send_mail')
  if cl.GetIssue():
    upload_args.extend(['--issue', cl.GetIssue()])
    print ("This branch is associated with issue %s. "
           "Adding patch to that issue." % cl.GetIssue())
  else:
    # Construct a description for this change from the log.
    # We need to convert diff options to log options.
    log_args = []
    if len(args) == 1 and not args[0].endswith('.'):
      log_args = [args[0] + '..']
    elif len(args) == 1 and args[0].endswith('...'):
      log_args = [args[0][:-1]]
    elif len(args) == 2:
      log_args = [args[0] + '..' + args[1]]
    else:
      log_args = args[:]  # Hope for the best!
    desc = RunGit('log', '--pretty=format:%s\n\n%b', *log_args)
    initial_text = """# Enter a description of the change.
# This will displayed on the codereview site.
# The first line will also be used as the subject of the review."""
    desc = UserEditedLog(initial_text + '\n' + desc)
    if not desc:
      print "Description empty; aborting."
      return 1
    subject = desc.splitlines()[0]
    upload_args.extend(['--message', subject])
    upload_args.extend(['--description', desc])
  issue, patchset = RealMain(['upload'] + upload_args + args)
  if not cl.GetIssue():
    cl.SetIssue(issue)
  cl.SetPatchset(patchset)


def CmdPush(args, cmd='push'):
  """
  Squashed commit into a single.
  Updates changelog with metadata (e.g. pointer to review).
  Pushes the code upstream.
  Updates review and closes.
  """
  parser = OptionParser(
      usage='git review %s [options] [upstream branch to apply against]' % cmd)
  parser.add_option('--bypass-hooks', action='store_true', dest='bypass_hooks',
                    help='bypass upload presubmit hook')
  parser.add_option('-m', dest='message',
                    help="override review description")
  parser.add_option('-f', action='store_true', dest='force',
                    help="force yes to questions (don't prompt)")
  parser.add_option('-c', dest='contributor',
                    help="external contributor for patch (appended to " +
                         "description)")
  parser.add_option('--tbr', action='store_true', dest='tbr',
                    help="short for 'to be reviewed', commit branch " +
                         "even without uploading for review")
  options, args = parser.parse_args(args)

  cl = ChangeList()

  if not args or cmd == 'push':
    # Default to merging against our best guess of the upstream branch.
    args = [cl.GetUpstreamBranch()]

  base_branch = args[0]

  if RunGit('diff-index', 'HEAD'):
    print 'Cannot %s with a dirty tree.  You must commit locally first.' % cmd
    return 1

  # This rev-list syntax means "show all commits not in my branch that
  # are in base_branch".
  upstream_commits = RunGit('rev-list', '^' + cl.GetBranchRef(),
                            base_branch).splitlines()
  if upstream_commits:
    print ('Base branch "%s" has %d commits '
           'not in this branch.' % (base_branch, len(upstream_commits)))
    print 'Run "git merge %s" before attempting to %s.' % (base_branch, cmd)
    return 1

  if not options.force and not options.bypass_hooks:
    RunHook(PREPUSH_HOOK, upstream_branch=base_branch, error_ok=False)

    # Check the tree status if the tree status URL is set.
    status = GetTreeStatus()
    if 'closed' == status:
      print ('The tree is closed.  Please wait for it to reopen. Use '
             '"git review push -f" to commit on a closed tree.')
      return 1
    elif 'unknown' == status:
      print ('Unable to determine tree status.  Please verify manually and '
             'use "git review push -f" to commit on a closed tree.')

  description = options.message or ''
  description_set = not not description

  if not options.tbr:
    # It is important to have these checks early.  Not only for user
    # convenience, but also because the cl object then caches the correct values
    # of these fields even as we're juggling branches for setting up the commit.
    if not cl.GetIssue():
      print 'Current issue unknown -- has this branch been uploaded?'
      print 'Use --tbr to commit without review.'
      return 1

    if not description:
      description = cl.GetDescription()
      if not description:
        print "Description empty; aborting."
        return 1
      description += "\n\nReviewers: \nReview URL: %s" % cl.GetIssueURL()
    else:
      description += "\n\nReview URL: %s" % cl.GetIssueURL()

    if options.contributor:
      description += "\nPatch from %s." % options.contributor

    if not description_set:
      description = UserEditedLog(description)

  else:
    # Submitting TBR.  Get a description now.
    if options.contributor:
      description += "\n\nPatch from %s." % options.contributor
    if not description_set:
      description = UserEditedLog('TBR: %s' % description)

    if not description:
      print "Description empty; aborting."
      return 1

  branches = [base_branch, cl.GetBranchRef()]
  if not options.force:
    subprocess.call(['git', 'diff', '--stat'] + branches)
    raw_input("About to commit; enter to confirm.")

  # We want to squash all this branch's commits into one commit with the
  # proper description.
  # We do this by doing a "merge --squash" into a new commit branch, then
  # pushting that.
  MERGE_BRANCH = 'git-cl-commit'
  # Delete the merge branch if it already exists.
  if RunGit(
    'show-ref', '--quiet', '--verify', 'refs/heads/' + MERGE_BRANCH,
    retcode=True)[1] == 0:
    RunGit('branch', '-D', MERGE_BRANCH)

  # We might be in a directory that's present in this branch but not in the
  # trunk.  Move up to the top of the tree so that git commands that expect a
  # valid CWD won't fail after we check out the merge branch.
  rel_base_path = RunGit('rev-parse', '--show-cdup')
  if rel_base_path:
    os.chdir(rel_base_path)

  # Stuff our change into the merge branch.
  # We wrap in a try...finally block so if anything goes wrong,
  # we clean up the branches.
  try:
    RunGit('checkout', '-q', '-b', MERGE_BRANCH, base_branch)
    RunGit('merge', '--squash', cl.GetBranchRef())
    RunGit('commit', '-m', description)
    if cmd == 'push':
      # push the merge branch.
      remote, branch = cl.FetchUpstreamTuple()
      output = RunGit('push', remote, 'HEAD:%s' % branch, retcode=True)[1]
  finally:
    # And then swap back to the original branch and clean up.
    RunGit('checkout', '-q', cl.GetBranch())
    RunGit('branch', '-D', MERGE_BRANCH)

  if cl.has_issue:
    if output == 0:
      print "Closing issue " \
          "(you may be prompted for your codereview password)..."
      try:
        cl.CloseIssue()
      except Exception:
        print "Note: Couldn't automatically close the issue!"
        print "You need to manually close it at %s/edit." % cl.GetIssueURL()
      cl.SetIssue(0)


def CmdPatch(args):
  parser = OptionParser(usage=('git review patch [options] '
                                        '<patch url or issue id>'))
  parser.add_option('-b', dest='newbranch',
                    help='create a new branch off trunk for the patch')
  parser.add_option('-f', action='store_true', dest='force',
                    help='with -b, clobber any existing branch')
  parser.add_option('--reject', action='store_true', dest='reject',
                    help='allow failed patches and spew .rej files')
  parser.add_option('-n', '--no-commit', action='store_true', dest='nocommit',
                    help="don't commit after patch applies")
  options, args = parser.parse_args(args)
  if len(args) != 1:
    return parser.print_help()
  input = args[0]

  if re.match(r'\d+', input):
    # Input is an issue id.  Figure out the URL.
    issue = input
    fetch = "curl --silent http://%s/%s" % (GetServer(), issue)
    grep = "grep -E -o '/download/issue[0-9]+_[0-9]+.diff'"
    pipe = subprocess.Popen("%s | %s" % (fetch, grep), shell=True,
                            stdout=subprocess.PIPE)
    path = pipe.stdout.read().strip()
    url = 'http://%s%s' % (GetServer(), path)
  else:
    # Assume it's a URL to the patch.
    match = re.match(r'http://.*?/issue(\d+)_\d+.diff', input)
    if match:
      issue = match.group(1)
      url = input
    else:
      print "Must pass an issue ID or full URL for 'Download raw patch set'"
      return 1

  if options.newbranch:
    if options.force:
      RunGit('branch', '-D', options.newbranch)
    RunGit('checkout', '-b', options.newbranch)

  # Switch up to the top-level directory, if necessary, in preparation for
  # applying the patch.
  top = RunGit('rev-parse', '--show-cdup')
  if top:
    os.chdir(top)

  # Construct a pipeline to feed the patch into "git apply".
  # We use "git apply" to apply the patch instead of "patch" so that we can
  # pick up file adds.
  # 1) Fetch the patch.
  fetch = "curl --silent %s" % url
  # 2) Munge the patch.
  # Git patches have a/ at the beginning of source paths.  We strip that out
  # with a sed script rather than the -p flag to patch so we can feed either
  # Git or svn-style patches into the same apply command.
  gitsed = "sed -e 's|^--- a/|--- |; s|^+++ b/|+++ |'"
  # 3) Apply the patch.
  # The --index flag means: also insert into the index (so we catch adds).
  apply = "git apply --index -p0"
  if options.reject:
    apply += " --reject"
  subprocess.check_call(' | '.join([fetch, gitsed, apply]), shell=True)

  # If we had an issue, commit the current state and register the issue.
  if not options.nocommit:
    RunGit('commit', '-m', 'patch from issue %s' % issue)
    cl = ChangeList()
    cl.SetIssue(issue)
    print "Committed patch."
  else:
    print "Patch applied to index."


def GetTreeStatus(exit_if_not_set=False):
  """
  Fetches the tree status and returns one of:
  'open', 'closed', 'unknown' or 'unset'

  """
  url = GetTreeStatusUrl(exit_if_not_set)
  if url:
    status = urlopen(url).read().lower()
    if status.find('closed') != -1 or status == '0':
      return 'closed'
    elif status.find('open') != -1 or status == '1':
      return 'open'
    return 'unknown'
  return 'unset'


def CmdTree(args):
  status = GetTreeStatus(True)
  print status
  if status != 'open':
    return 1
  return 0


def CmdUpstream(args):
  cl = ChangeList()
  print cl.GetUpstreamBranch()


COMMANDS = [
  ('init',        "setup config from the root .codereview.cfg",     CmdInit),
  ('issue',       "show/set current branch's issue number",         CmdIssue),
  ('patch',       "patch in a code review",                         CmdPatch),
  ('push',        "commit the current changelist via git",          CmdPush),
  ('status',      "show the status of changelists",                 CmdStatus),
  ('tree',        "show the status of the tree",                    CmdTree),
  ('submit',      "submit the current changelist to codereview",    CmdSubmit),
  ('upstream',    "show the name of the upstream branch, if any",   CmdUpstream),
]

def Usage(executable_filename):
  name = os.path.split(executable_filename)[1]
  print 'usage: %s <command>' % name
  print 'commands are:'
  for name, desc, _ in COMMANDS:
    print '  %-15s %s' % (name, desc)
  sys.exit(1)


def main(argv):

  if len(argv) < 2:
    return CmdReview()

  command = argv[1]
  if command in ['help', '--help']:
    Usage(argv[0])

  for name, _, func in COMMANDS:
    if name == command:
      return func(argv[2:])

  return CmdReview(argv[2:])

def CmdReview(args=None):
  pass

if __name__ == '__main__':
  sys.exit(main(sys.argv))

# ------------------------------------------------------------------------------
# local imports
# ------------------------------------------------------------------------------

import review
import watchlist


def Backquote(cmd, cwd=None):
  """Like running `cmd` in a shell script."""
  return subprocess.Popen(cmd,
                          cwd=cwd,
                          stdout=subprocess.PIPE).communicate()[0].strip()


class ChangeOptions:
  def __init__(self, commit=None, upstream_branch=None):
    self.commit = commit
    self.verbose = None
    self.default_presubmit = None
    self.may_prompt = None

    root = Backquote(['git', 'rev-parse', '--show-cdup'])
    if not root:
      root = "."
    absroot = os.path.abspath(root)
    if not root:
      raise Exception("Could not get root directory.")
    log = Backquote(['git', 'show', '--name-only',
                     '--pretty=format:%H%n%s%n%n%b'])
    m = re.match(r'^(\w+)\n(.*)$', log, re.MULTILINE|re.DOTALL)
    if not m:
      raise Exception("Could not parse log message: %s" % log)
    name = m.group(1)
    files = scm.GIT.CaptureStatus([root], upstream_branch)
    issue = Backquote(['git', 'cl', 'status', '--field=id'])
    if issue == 'None':
      issue = ''
    try:
      description = ChangeList().GetDescription() or m.group(2)
    except ValueError:
      description = m.group(2)
    patchset = None
    self.change = presubmit_support.GitChange(name, description, absroot, files,
                                              issue, patchset)


def RunHooks(hook_name, upstream_branch):
  commit = (hook_name == 'pre-cl-push')

  # Create our options based on the command-line args and the current checkout.
  options = ChangeOptions(commit=commit, upstream_branch=upstream_branch)

  # Apply watchlists on upload.
  if not commit:
    watchlist = watchlists.Watchlists(options.change.RepositoryRoot())
    files = [f.LocalPath() for f in options.change.AffectedFiles()]
    watchers = watchlist.GetWatchersForPaths(files)
    Backquote(['git', 'config', '--replace-all',
               'codereview.extracc', ','.join(watchers)])

  # Run the presubmit checks.
  if presubmit_support.DoPresubmitChecks(options.change,
                                         options.commit,
                                         options.verbose,
                                         sys.stdout,
                                         sys.stdin,
                                         options.default_presubmit,
                                         options.may_prompt):
    sys.exit(0)
  else:
    sys.exit(1)


if __name__ == '__mains__':
  program_name = os.path.basename(sys.argv[0])
  if len(sys.argv) != 2:
    print "Usage: %s [upstream branch]" % program_name
    sys.exit(1)
  RunHooks(program_name, sys.argv[1])
