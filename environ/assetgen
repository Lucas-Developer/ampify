#! /usr/bin/env python

# No Copyright (-) 2010 The Ampify Authors. This file is under the
# Public Domain license that can be found in the root LICENSE file.

"""Javascript, CSS and Images Assets Builder."""

import os
import pylibs
import sys

from base64 import b64encode
from glob import glob
from hashlib import sha1
from mimetypes import guess_type
from optparse import OptionParser
from os import chdir, remove, stat
from os.path import dirname, exists, isfile, join, realpath, split, splitext
from re import compile as compile_regex
from stat import ST_MTIME
from time import sleep, time

from optcomplete import autocomplete
from pyutil.env import run_command
from pyutil.scm import is_git, SCMConfig
from yaml import safe_load as decode_yaml

# ------------------------------------------------------------------------------
# Some Constants
# ------------------------------------------------------------------------------

AMPIFY_ROOT = dirname(dirname(realpath(__file__)))
AMPIFY_BIN = join(AMPIFY_ROOT, 'environ', 'local', 'bin')

CSS_COMPRESSOR = join(AMPIFY_BIN, 'yuicompressor-2.4.2.jar')
JS_COMPRESSOR = join(AMPIFY_BIN, 'closure-2010-03-24.jar')

css_embed_url_template = None
css_embed_root_path = None

# ------------------------------------------------------------------------------
# CSS Embedding
# ------------------------------------------------------------------------------

embed_regex = compile_regex(r'embed\("([^\)]*)"\)')
find_embeds = embed_regex.findall
substitute_embeds = embed_regex.sub

def convert_to_data_uri(match):
    path = match.group(1)
    ctype = guess_type(path)[0]
    if not ctype:
        exit("Could not detect the content type of: %s" % path)
    try:
        data = open(join(css_embed_root_path, path), 'rb').read()
    except IOError:
        print "!! Couldn't find %s" % join(css_embed_root_path, path)
        url = css_embed_url_template % {'path': path, 'hash': time()}
        return 'url("%s")' % url
    hash = sha1(data).hexdigest()
    data = b64encode(data)
    if len(data) > 32000:
        url = css_embed_url_template % {'path': path, 'hash': hash[:18]}
        return 'url("%s")' % url
    return 'url("data:%s;base64,%s")' % (ctype, data)

def convert_to_url(match):
    path = match.group(1)
    try:
        data = open(join(css_embed_root_path, path), 'rb').read()
    except IOError:
        print "!! Couldn't find %s" % join(css_embed_root_path, path)
        hash = time()
    else:
        hash = sha1(data).hexdigest()[:18]
    url = css_embed_url_template % {'path': path, 'hash': hash}
    return 'url("%s")' % url

# ------------------------------------------------------------------------------
# Asset Generator
# ------------------------------------------------------------------------------

def assetgen(config_path, clean, minify=True):

    config_file = open(config_path, 'rb')
    config_data = config_file.read() % os.environ
    config = decode_yaml(config_data)
    config_file.close()
    if not config:
        exit("No config found in %s" % config_path)

    get_config = config.get
    directory = dirname(config_path)
    chdir(directory)

    css_embed = 0
    sass_input_files = {}
    css_embed_files = []
    css_output_files = []

    global css_embed_url_template, css_embed_root_path

    sass2css = get_config('sass2css')
    if sass2css:
        if not isinstance(sass2css, list):
            exit("The `sass2css` config value needs to be a list.")
        css_embed_url_template = get_config('css_embed_url_template')
        css_embed_root_path = get_config('css_embed_root_path')
        if css_embed_url_template and css_embed_root_path:
            css_embed = 1
        for pattern in sass2css:
            files = glob(pattern)
            if not files:
                exit("Couldn't find matching files for %r" % pattern)
            for file in files:
                prefix = splitext(file)[0]
                css_output_files.append(prefix)
                css_output_files.append(prefix + '.ie')
                if css_embed:
                    sass_file = open(file, 'rb')
                    sass = sass_file.read()
                    sass_file.close()
                    embeds = find_embeds(sass)
                    if not embeds:
                        if newer(file, prefix + '.css'):
                            sass_input_files[file] = prefix
                        continue
                    if (newer(file, prefix + '.css') or
                        newer(file, prefix + '.ie.css')):
                        sass_input_files[file] = prefix
                        css_embed_files.append(prefix)
                    regen = 0
                    for embed in embeds:
                        embed = join(css_embed_root_path, embed)
                        if newer(embed, prefix + '.css'):
                            regen = 1
                            break
                    if regen:
                        sass_input_files[file] = prefix
                        css_embed_files.append(prefix)
                elif newer(file, prefix + '.css'):
                    sass_input_files[file] = prefix

    coffee_input_files = {}
    js_output_files = []
    coffee2js_output_path = get_config('coffee2js_output_path')

    coffee2js = get_config('coffee2js')
    if coffee2js:
        if not isinstance(coffee2js, list):
            exit("The `coffee2js` config value needs to be a list.")
        for pattern in coffee2js:
            files = glob(pattern)
            if not files:
                exit("Couldn't find matching files for %r" % pattern)
            for file in files:
                prefix = splitext(file)[0]
                if coffee2js_output_path:
                    prefix = join(coffee2js_output_path, split(prefix)[1])
                js_output_files.append(prefix)
                if newer(file, prefix + '.js'):
                    coffee_input_files[file] = prefix

    js_compile_files = get_config('compile_js')
    if js_compile_files:
        if not isinstance(js_compile_files, dict):
            exit("The `compile_js` config value needs to be a mapping.")
        for file in js_compile_files:
            prefix = splitext(file)[0]
            js_output_files.append(prefix)

    remove_files = get_config('remove_files')
    if remove_files:
        if not isinstance(remove_files, list):
            exit("The `remove_files` config value needs to be a list.")
    else:
        remove_files = []

    if clean:
        for prefix in css_output_files:
            for file in (prefix + '.css', prefix + '.min.css'):
                if exists(file):
                    print "=> Removing %s" % file
                    remove(file)
        for prefix in js_output_files:
            for file in (prefix + '.js', prefix + '.min.js'):
                if exists(file):
                    print "=> Removing %s" % file
                    remove(file)
        for file in remove_files:
            if exists(file):
                print "=> Removing %s" % file
                remove(file)
        return

    break_printed = 0
    if sass_input_files:
        break_printed = 1
        print

    for file in sass_input_files:
        output = sass_input_files[file] + '.css'
        print "=> Converting %s -> css" % file
        err = stderr('sass', '-c', file, output)
        if err:
            print err
        if do('sass', file, output):
            print
            exit("Failed to compile sass file %s" % file)
        print

    if css_embed_files and not break_printed:
        break_printed = 1
        print

    for file in css_embed_files:
        input = output = file + '.css'
        print "=> Embedding %s -> %s" % (input, output)
        print
        css_file = open(file + '.css', 'rb')
        css = css_file.read()
        css_file.close()
        css_file = open(file + '.css', 'wb')
        css_file.write(substitute_embeds(convert_to_data_uri, css))
        css_file.close()
        output = file + '.ie.css'
        print "=> Embedding %s -> %s" % (input, output)
        print
        css_file = open(output, 'wb')
        css_file.write(substitute_embeds(convert_to_url, css))
        css_file.close()

    for file in css_output_files:
        input = file + '.css'
        output = file + '.min.css'
        if not exists(input):
            continue
        if not newer(input, output):
            continue
        if not break_printed:
            break_printed = 1
            print
        if minify:
            print "=> Minifying %s -> %s" % (input, output)
            if do(
                'java', '-jar', CSS_COMPRESSOR, '--charset', 'utf-8', input, '-o',
                output
                ):
                print
                exit("Couldn't successfully minify %s" % input)
            print

    if coffee_input_files and not break_printed:
        break_printed = 1
        print

    for file in coffee_input_files:
        print "=> Converting %s -> js" % file
        if coffee2js_output_path:
            command = ['coffee', '-c', '-o', coffee2js_output_path, file]
        else:
            command = ['coffee', '-c', file]
        if do(*command):
            print
            exit("Failed to compile coffeescript file %s" % file)
        print

    if js_compile_files:
        for output in js_compile_files:
            deps = js_compile_files[output]
            if not isinstance(deps, list):
                exit("The `js_compile` mapping needs to have list values.")
            regen = 0
            if exists(output):
                if newer(config_path, output):
                    regen = 1
                if not regen:
                    for file in deps:
                        if file not in ['<wrap>', '</wrap>']:
                            if not newer(output, file):
                                regen = 1
                                break
            else:
                regen = 1
            if regen:
                if not break_printed:
                    break_printed = 1
                    print
                print "=> Building %s" % output
                print
                content = []; out = content.append
                for file in deps:
                    if file == '<wrap>':
                        out("\n(function(){\n")
                    elif file == '</wrap>':
                        out("\n})();\n\n")
                    else:
                        if not exists(file):
                            exit("Couldn't find the file %s" % file)
                        dep_file = open(file, 'rb')
                        out(dep_file.read())
                        dep_file.close()
                output_file = open(output, 'wb')
                output_file.write('\n'.join(content))
                output_file.close()
            input = output
            output = splitext(output)[0] + '.min.js'
            if not newer(input, output):
                 continue
            if not break_printed:
                break_printed = 1
                print
            if minify:
                print "=> Minifying %s -> %s" % (input, output)
                if do(
                    'java', '-jar', JS_COMPRESSOR, '--js', input,
                    '--js_output_file', output
                    ):
                    print
                    exit("Couldn't successfully minify %s" % input)
                print

    for file in remove_files:
        if not break_printed:
            break_printed = 1
            print
        if exists(file):
            print "=> Removing %s" % file
            print
            remove(file)

# ------------------------------------------------------------------------------
# Utility Functions
# ------------------------------------------------------------------------------

def newer(input, output, cache={}):
    if input in cache:
        input_mtime = cache[input]
    else:
        try:
            input_mtime = stat(input)[ST_MTIME]
        except OSError:
            return
    try:
        if output in cache:
            output_mtime = cache[output]
        else:
            output_mtime = stat(output)[ST_MTIME]
    except Exception:
        return 1
    if input_mtime >= output_mtime:
        return 1

def do(*args, **kwargs):
    kwargs['retcode'] = True
    kwargs['redirect_stdout'] = False
    kwargs['redirect_stderr'] = False
    return run_command(args, **kwargs)[1]

def stderr(*args, **kwargs):
    kwargs['reterror'] = True
    return run_command(args, **kwargs)[1]

def exit(msg):
    print "ERROR:", msg
    sys.exit(1)

# ------------------------------------------------------------------------------
# Main Runner
# ------------------------------------------------------------------------------

def main(argv=None):

    argv = argv or sys.argv[1:]
    op = OptionParser(usage=(
        "Usage: assetgen [<path/to/assetgen.yaml> ...] [options]\n\n"
        "Note:\n"
        "    If you don't specify assetgen.yaml file paths, then `git\n"
        "    ls-files *assetgen.yaml` will be used to detect all config\n"
        "    files in the current repository. So you need to be inside\n"
        "    a git repository's working tree."
        ))

    op.add_option(
        '--clean', action='store_true', help="remove all generated files"
        )

    op.add_option(
        '--dev', action='store_true', help="do not minify files"
        )

    op.add_option(
        '--watch', action='store_true', help="keep running assetgen on a loop"
        )

    autocomplete(op)
    options, files = op.parse_args(argv)

    clean = options.clean
    dev = options.dev
    watch = options.watch

    if files:
        for file in files:
            if not isfile(file):
                exit("Could not find %s" % file)

    if not files:
        if not is_git():
            op.print_help()
            sys.exit()
        root = SCMConfig().root
        files = run_command(
            ['git', 'ls-files', '*assetgen.yaml'], cwd=root
            ).strip().splitlines()
        if not files:
            op.print_help()
            sys.exit()
        files = [join(root, file) for file in files]

    while 1:
        for file in files:
            try:
                assetgen(realpath(file), clean, not dev)
            except SystemExit:
                if not watch:
                    raise
        if watch:
            sleep(1)
        else:
            break

# ------------------------------------------------------------------------------
# Self Runner
# ------------------------------------------------------------------------------

if __name__ == '__main__':
    main()
