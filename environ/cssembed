#! /usr/bin/env python

# Public Domain (-) 2010-2011 The Ampify Authors.
# See the UNLICENSE file for details.

import base64
import mimetypes
import re
import sys

from optparse import OptionParser
from os import getcwd
from os.path import join as join_path

# Handle Command Line Options

op = OptionParser(usage="Usage: %prog <css-file> [options]")

op.add_option(
    '-r', '--root', dest='root', help="set the root directory for asset paths"
    )

op.add_option(
    '--IE', dest='IE', action='store_true',
    help="generate output for older browsers like IE 7"
    )

op.add_option(
    '--static-prefix', dest='static_prefix',
    help="set the static URL prefix (required)"
    )

op.add_option(
    '--static-suffix', dest='static_suffix', default='',
    help="set the static URL suffix"
    )

options, args = op.parse_args(sys.argv[1:])

if not args:
    op.print_help()
    sys.exit(1)

if not options.static_prefix:
    op.print_help()
    sys.exit(1)

root_path = options.root or getcwd()
static_prefix = options.static_prefix
static_suffix = options.static_suffix

# Main Regex

substitute_embed = re.compile(r'embed\("([^\)]*)"\)').sub

# Main Data URI Conversion Function

def convert_to_data_uri(foo):
    path = foo.group(1)
    ctype = mimetypes.guess_type(path)[0]
    if not ctype:
        raise ValueError("Could not detect the file type of: %s" % path)
    data = open(join_path(root_path, path), 'rb').read()
    data = base64.b64encode(data)
    if len(data) > 32000:
        return 'url("%s%s%s")' % (static_prefix, path, static_suffix)
    return 'url("data:%s;base64,%s")' % (ctype, data)

def convert_to_url(foo):
    path = foo.group(1)
    return 'url("%s%s%s")' % (static_prefix, path, static_suffix)

# Run

path = args[0]
source = open(path, 'rb').read()
if options.IE:
    print substitute_embed(convert_to_url, source)
else:
    print substitute_embed(convert_to_data_uri, source)
